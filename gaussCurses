#!/usr/bin/env python3

import curses
import math
from matrix import *
from fractions import Fraction

def drawMatrix(x,y,matrix,scr):
    scr.addstr(y,x,str(matrix))
    return

def mergeMultilines(mls):
    maxLines = max([len(ml.split('\n')) for ml in mls])
    paddedMls = mls[:]
    for i in range(len(paddedMls)):
        mlWidth = len(paddedMls[i].split('\n')[0])
        mlHeight = len(paddedMls[i].split('\n'))
        paddedMls[i] = (' ' * mlWidth + '\n') * ((maxLines - mlHeight + 1) // 2) + paddedMls[i]
        paddedMls[i] += ('\n' + ' ' * mlWidth) * ((maxLines - mlHeight) // 2)
    lines = [''.join([ml.split('\n')[i] for ml in paddedMls]) for i in range(maxLines)]
    return '\n'.join(lines)

def moveCursor(mats,matChoice,colnum,rownum,maxy,scr):
    x = 0
    y = 1 + rownum + (maxy - mats[matChoice].getRows() - 2) // 2
    for m in range(matChoice):
        x += 3 + mats[m].getCols()*(1 + max([max([len(str(i)) for i in row]) for row in mats[m].getMatrix()]))
    x += (1 + colnum) * (1 + max([max([len(str(i)) for i in row]) for row in mats[matChoice].getMatrix()]))
    scr.addstr(y,x,'')
    return

def main():
    #Init curses
    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    stdscr.keypad(1)

    #starting state
    pos = [0, 0, 0] # Matrix, column, row
    state = [identity(2,Fraction(1,1),Fraction(0,1)),identity(2,Fraction(1,1),Fraction(0,1))]

    #Draw state
    c = None
    while c != ord('q'):
        if c == ord('b'):
            pos[0] = (pos[0] - 1) % len(state)
            pos[1] = 0
            pos[2] = 0
        elif c == ord('w'):
            pos[0] = (pos[0] + 1) % len(state)
            pos[1] = 0
            pos[2] = 0
        elif c == ord('h'):
            pos[1] = (pos[1] - 1) % state[pos[0]].getCols()
        elif c == ord('j'):
            pos[2] = (pos[2] + 1) % state[pos[0]].getRows()
        elif c == ord('k'):
            pos[2] = (pos[2] - 1) % state[pos[0]].getRows()
        elif c == ord('l'):
            pos[1] = (pos[1] + 1) % state[pos[0]].getCols()
        elif c == ord('H'):
            if state[pos[0]].getCols() > 1:
                state[pos[0]].setCols(state[pos[0]].getCols() - 1)
        elif c == ord('J'):
            state[pos[0]].setRows(state[pos[0]].getRows() + 1)
        elif c == ord('K'):
            if state[pos[0]].getRows() > 1:
                state[pos[0]].setRows(state[pos[0]].getRows() - 1)
        elif c == ord('L'):
            state[pos[0]].setCols(state[pos[0]].getCols() + 1)
        elif c == ord('c'):
            mul = 1
            num = 0
            den = 1
            n = stdscr.getch()
            if n == ord('-'):
                mul = -1
                n = stdscr.getch()
            elif n == ord('+'):
                mul = 1
                n = stdscr.getch()
            while ord('0') <= n <= ord('9'):
                num = 10 * num + n - ord('0')
                n = stdscr.getch()
            if n == ord('/') or n == ord('\\'):
                den = 0
                n = stdscr.getch()
                while ord('0') <= n <= ord('9'):
                    den = 10 * den + n - ord('0')
                    n = stdscr.getch()
            if n == ord('\n'):
                state[pos[0]].setValue(pos[1],pos[2],Fraction(mul*num,den))
        elif c == ord('+'):
            state = [identity(2,Fraction(1,1),Fraction(0,1))] + state
        elif c == ord('-'):
            if len(state) > 2:
                state.pop(0)
        elif c == ord('*'):
            if len(state) > 2 and pos[0] < len(state) - 1:
                state[pos[0] + 1] = state[pos[0]] * state[pos[0] + 1]
                state.pop(pos[0])
        stdscr.clear()
        product = state[0]
        for mat in state[1:]:
            product = product * mat
        output = mergeMultilines([*[str(mat) for mat in state], " = ", str(product)])
        stdscr.addstr(0,0,output)
        height = max(map(lambda x: x.getRows(), state)) + 2
        moveCursor(state,*pos,height,stdscr)
        stdscr.refresh()
        c = stdscr.getch()

    #clean up
    curses.endwin()
    return

if __name__ == "__main__":
    main()
